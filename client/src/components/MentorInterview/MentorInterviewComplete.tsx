import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';

interface InsightsData {
  insights: string;
  mentor_name: string;
  response_count: number;
}

const MentorInterviewComplete: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [insights, setInsights] = useState<InsightsData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Get access token from state or localStorage
  const getAccessToken = () => {
    // First try to get from navigation state
    if (location.state?.access_token) {
      return location.state.access_token;
    }
    
    // Fallback to localStorage (set by previous pages)
    return localStorage.getItem('mentor_access_token');
  };

  useEffect(() => {
    const loadInsights = () => {
      try {
        // First try to get insights from localStorage (generated by button click)
        const storedInsights = localStorage.getItem('mentor_insights');
        if (storedInsights) {
          const data = JSON.parse(storedInsights);
          setInsights(data);
          setIsLoading(false);
          // Clean up localStorage after loading
          localStorage.removeItem('mentor_insights');
          return;
        }

        // Fallback: If insights not found, show error
        setError('Interview summary not available. Please complete the interview properly.');
        setIsLoading(false);
      } catch (err) {
        console.error('Error loading insights:', err);
        setError('Unable to load your interview summary. Please try again later.');
        setIsLoading(false);
      }
    };

    loadInsights();
  }, []);

  if (isLoading) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center gap-6 bg-[#F8F4EB] p-4">
        <div className="w-full max-w-lg rounded-lg bg-white p-6 text-center shadow-lg sm:p-8">
          <div className="mb-6 flex justify-center">
            <img src="/assets/logo-b.svg" alt="MELD" className="h-8 w-auto" />
          </div>
          
          <div className="mb-6 flex justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-4 border-gray-200 border-t-[#B04A2F]"></div>
          </div>
          
          <div className="font-serif mb-4 text-xl leading-snug text-[#B04A2F]">
            Loading Your Interview Summary...
          </div>
          
          <p className="text-base text-gray-600">
            Just a moment while we prepare your personalized completion message.
          </p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center gap-6 bg-[#F8F4EB] p-4">
        <div className="w-full max-w-lg rounded-lg bg-white p-6 text-center shadow-lg sm:p-8">
          <div className="mb-6 flex justify-center">
            <img src="/assets/logo-b.svg" alt="MELD" className="h-8 w-auto" />
          </div>
          
          <div className="mb-6 flex justify-center">
            <div className="rounded-full bg-red-100 p-3">
              <svg className="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </div>
          </div>
          
          <div className="font-serif mb-4 text-xl leading-snug text-[#B04A2F]">
            Something Went Wrong
          </div>
          
          <p className="mb-6 text-base text-gray-600">
            {error}
          </p>
          
          <button
            onClick={() => window.location.reload()}
            className="rounded-md bg-[#B04A2F] px-4 py-2 text-white hover:bg-[#8a3a23] transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center gap-6 bg-[#F8F4EB] p-4">
      {/* Card */}
      <div className="w-full max-w-2xl rounded-lg bg-white p-6 shadow-lg sm:p-8">
        {/* Logo */}
        <div className="mb-6 flex justify-center">
          <img src="/assets/logo-b.svg" alt="MELD" className="h-8 w-auto" />
        </div>

        {/* Success Icon */}
        <div className="mb-6 flex justify-center">
          <div className="rounded-full bg-green-100 p-3">
            <svg
              className="h-8 w-8 text-green-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 13l4 4L19 7"
              />
            </svg>
          </div>
        </div>

        {/* Content */}
        <div className="font-serif mb-6 text-2xl leading-snug text-[#B04A2F] text-center">
          Interview Complete
        </div>

        {/* Interviewer's Closing Response */}
        <div className="mb-8 text-center">
          <div className="text-base leading-relaxed text-gray-800 whitespace-pre-line">
            {insights?.insights}
          </div>
        </div>

        {/* Closing Message */}
        <div className="text-center">
          <p className="mb-4 text-base leading-relaxed text-gray-600">
            Your {insights?.response_count} thoughtful responses are now part of MELD's founding storyâ€”a growing library of mentorship that will guide and inspire the next generation of women leaders.
          </p>
          
          <p className="text-base leading-relaxed text-gray-600">
            Thank you for being part of this movement. ðŸ’œ
          </p>
        </div>
      </div>
    </div>
  );
};

export default MentorInterviewComplete;
